# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ImageProcessingMidterm.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2 as cv
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import traceback
import numpy as np


class Ui_MainWindow(object):
    image = None
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 10, 141, 71))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 90, 141, 71))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 170, 141, 71))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 250, 141, 71))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 330, 141, 71))
        self.pushButton_5.setObjectName("pushButton_5")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(190, 10, 256, 256))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(480, 10, 256, 256))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_3.setGeometry(QtCore.QRect(190, 295, 256, 256))
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.graphicsView_4 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_4.setGeometry(QtCore.QRect(480, 295, 256, 256))
        self.graphicsView_4.setObjectName("graphicsView_4")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(275, 270, 500, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(590, 270, 500, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(300, 555, 500, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(590, 555, 500, 16))
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.LoadImage)
        self.pushButton_2.clicked.connect(self.SmoothFilter)
        self.pushButton_3.clicked.connect(self.Sharp)
        self.pushButton_4.clicked.connect(self.Gaussian)
        self.pushButton_5.clicked.connect(self.LowerPass)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Image Processing"))
        self.pushButton.setText(_translate("MainWindow", "Load Image"))
        self.pushButton_2.setText(_translate("MainWindow", "Smooth Filter"))
        self.pushButton_3.setText(_translate("MainWindow", "Sharp"))
        self.pushButton_4.setText(_translate("MainWindow", "Gaussian"))
        self.pushButton_5.setText(_translate("MainWindow", "Lower Pass"))
        self.label.setText(_translate("MainWindow", "Original Image"))
        self.label_2.setText(_translate("MainWindow", "Image"))
        self.label_3.setText(_translate("MainWindow", "Image"))
        self.label_4.setText(_translate("MainWindow", "Image"))

    def LoadImage(self):
        try:
            file_dialog = QFileDialog()
            file_path, _ = file_dialog.getOpenFileName(None, "Open Image File", "", "Image Files (*.png *.jpg *.bmp *jfif)")

            if file_path:
                self.setupUi(self.MainWindow)
                self.retranslateUi(self.MainWindow)
                self.image = cv.imread(file_path)
                self.DisplayImage(self.image, self.graphicsView)

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def Fourier_Transform(self, img):
        img2 = cv.cvtColor(np.float32(img), cv.COLOR_BGR2GRAY)
        dft = cv.dft(np.float32(img2), flags=cv.DFT_COMPLEX_OUTPUT)
        dft_shift = np.fft.fftshift(dft)

        rows, columns = img2.shape
        Center_row, Center_column = rows // 2, columns // 2
        if self.smooth is True:
            mask = np.zeros((rows, columns, 2), np.uint8)
            Ratio = 50
            mask[Center_row - Ratio:Center_row + Ratio,
            Center_column - Ratio:Center_column + Ratio] = 1
        elif self.sharp is True:
            mask = np.ones((rows, columns, 2), np.uint8)
            Ratio = 20
            mask[Center_row - Ratio:Center_row + Ratio,
            Center_column - Ratio:Center_column + Ratio] = 0
        elif self.gaussian is True:
            mask = np.ones((rows, columns, 2), dtype=np.float32)
            sigma = 30
            for u in range(rows):
                for v in range(columns):
                    D = np.sqrt((u-rows/2)**2 + (v-columns/2)**2)
                    mask[u, v] = np.exp(-D**2 / (2 * sigma ** 2))

        fshift = dft_shift * mask
        f_ishift = np.fft.ifftshift(fshift)
        img_sd = cv.idft(f_ishift)
        img_sd = cv.magnitude(img_sd[:, :, 0], img_sd[:, :, 1])

        cv.normalize(img_sd, img_sd, 0, 255, cv.NORM_MINMAX)
        img_sd = np.uint8(img_sd)
        img_sd = cv.cvtColor(img_sd, cv.COLOR_GRAY2BGR)

        self.height, self.width = img_sd.shape
        self.bytesPerLine = self.width
        self.Img = QtGui.QImage(img_sd.data, self.width, self.height, self.bytesPerLine,
                                    QtGui.QImage.Format_Grayscale8)

        if self.gaussian is False:
            self.graphicsView_4.setScene(QtWidgets.QGraphicsScene())
            self.pixmap = QtGui.QPixmap.fromImage(self.Img)
            self.graphicsView_4.scene().addPixmap(self.pixmap)
        elif self.gaussian is True:
            self.graphicsView_2.setScene(QtWidgets.QGraphicsScene())
            self.pixmap = QtGui.QPixmap.fromImage(self.Img)
            self.graphicsView_2.scene().addPixmap(self.pixmap)


    def SmoothFilter(self, image):
        self.sharp = False
        self.smooth = True
        self.gaussian = False
        try:
            if self.image is None:
                QtWidgets.QMessageBox.warning(None, "Warning", "Please load an image first.")
                return

            self.setupUi(self.MainWindow)
            self.retranslateUi(self.MainWindow)

            self.DisplayImage(self.image, self.graphicsView)

            average_filtered = cv.blur(self.image, (3, 3))
            self.DisplayImage(average_filtered, self.graphicsView_2)
            self.label_2.setText(QtCore.QCoreApplication.translate("MainWindow", "1(a) Average Filter"))
            self.label_2.setGeometry(QtCore.QRect(555,270,500,16))

            median_filtered = cv.medianBlur(self.image, 3)
            self.DisplayImage(median_filtered, self.graphicsView_3)
            self.label_3.setText(QtCore.QCoreApplication.translate("MainWindow", "1(a) Median Filter"))
            self.label_3.setGeometry(QtCore.QRect(260, 555, 500, 16))

            self.Fourier_Transform(self.image)
            self.label_4.setText(QtCore.QCoreApplication.translate("MainWindow", "1(a) Fourier Transform"))
            self.label_4.setGeometry(QtCore.QRect(550, 555, 500, 16))

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def Sharp(self):
        self.sharp = True
        self.smooth = False
        self.gaussian = False
        try:
            if self.image is None:
                QtWidgets.QMessageBox.warning(None, "Warning", "Please load an image first.")
                return

            self.setupUi(self.MainWindow)
            self.retranslateUi(self.MainWindow)

            self.DisplayImage(self.image, self.graphicsView)

            self.graphicsView_2 = QtWidgets.QGraphicsView()
            self.label_2.setText(QtCore.QCoreApplication.translate("MainWindow", "No use"))
            self.label_2.setGeometry(QtCore.QRect(585,270,500,16))

            sobel_x = cv.Sobel(self.image, cv.CV_64F, 1, 0, ksize=11)
            sobel_y = cv.Sobel(self.image, cv.CV_64F, 0, 1, ksize=11)
            self.sobel_combined = cv.addWeighted(cv.convertScaleAbs(sobel_x), 0.5, cv.convertScaleAbs(sobel_y), 0.5, 0)
            self.sobel_combined = cv.addWeighted(self.image, 1.5, self.sobel_combined, -0.5, 0)
            self.DisplayImage(self.sobel_combined, self.graphicsView_3)
            self.label_3.setText(QtCore.QCoreApplication.translate("MainWindow", "2(a) Sobel Mask"))
            self.label_3.setGeometry(QtCore.QRect(260, 555, 500, 16))

            self.Fourier_Transform(self.image)
            self.label_4.setText(QtCore.QCoreApplication.translate("MainWindow", "2(b) Fourier Transform"))
            self.label_4.setGeometry(QtCore.QRect(550, 555, 500, 16))

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def Gaussian(self):
        try:
            if self.image is None:
                QtWidgets.QMessageBox.warning(None, "Warning", "Please load an image first.")
                return

            self.setupUi(self.MainWindow)
            self.retranslateUi(self.MainWindow)

            self.DisplayImage(self.image, self.graphicsView)
            gaussian_filtered = cv.GaussianBlur(self.image, (5, 5), 1)
            self.DisplayImage(gaussian_filtered, self.graphicsView_2)
            self.label_2.setText(QtCore.QCoreApplication.translate("MainWindow", "Result"))
            self.label_2.setGeometry(QtCore.QRect(585,270,500,16))
            self.label_3.setText(QtCore.QCoreApplication.translate("MainWindow", "No use"))
            self.label_3.setGeometry(QtCore.QRect(300, 555, 500, 16))
            self.label_4.setText(QtCore.QCoreApplication.translate("MainWindow", "No use"))
            self.label_4.setGeometry(QtCore.QRect(585, 555, 500, 16))

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def LowerPass(self):
        self.gaussian = True
        self.smooth = False
        self.sharp = False
        try:
            if self.image is None:
                QtWidgets.QMessageBox.warning(None, "Warning", "Please load an image first.")
                return

            self.setupUi(self.MainWindow)
            self.retranslateUi(self.MainWindow)

            self.DisplayImage(self.image, self.graphicsView)

            self.Fourier_Transform(self.image)
            self.label_2.setText(QtCore.QCoreApplication.translate("MainWindow", "Result"))
            self.label_2.setGeometry(QtCore.QRect(585,270,500,16))
            self.label_3.setText(QtCore.QCoreApplication.translate("MainWindow", "No use"))
            self.label_3.setGeometry(QtCore.QRect(300, 555, 500, 16))
            self.label_4.setText(QtCore.QCoreApplication.translate("MainWindow", "No use"))
            self.label_4.setGeometry(QtCore.QRect(585, 555, 500, 16))

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def ConvertCvImageToPixmap(self, image):
        try:
            height, width, channel = image.shape
            bytes_per_line = 3 * width
            q_img = QtGui.QImage(bytes(image.data), width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
            return QtGui.QPixmap.fromImage(q_img)

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


    def DisplayImage(self, image, graphics_view):
        try:
            pixmap = self.ConvertCvImageToPixmap(image)
            graphics_view.setScene(QtWidgets.QGraphicsScene())
            graphics_view.scene().addPixmap(pixmap)

        except Exception as e:
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Error", f"An error occurred: {str(e)}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
